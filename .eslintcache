[{"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/index.tsx":"1","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/App.tsx":"2","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/pages/clustermap.js":"3","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/pages/LoginPage.tsx":"4","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/pages/NotFoundPage.tsx":"5","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/pages/FiliationPage.tsx":"6","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/firebase/config.tsx":"7","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/components/NavBar.tsx":"8","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/components/FilteredUsersTable.tsx":"9","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/components/FilterUsers.tsx":"10","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/components/ContactsTable.tsx":"11","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/classes/User.tsx":"12"},{"size":204,"mtime":1622750746056,"results":"13","hashOfConfig":"14"},{"size":767,"mtime":1622750746045,"results":"15","hashOfConfig":"14"},{"size":4076,"mtime":1622750752155,"results":"16","hashOfConfig":"14"},{"size":3209,"mtime":1622750746058,"results":"17","hashOfConfig":"14"},{"size":160,"mtime":1622750746059,"results":"18","hashOfConfig":"14"},{"size":934,"mtime":1622750752154,"results":"19","hashOfConfig":"14"},{"size":772,"mtime":1622750746056,"results":"20","hashOfConfig":"14"},{"size":1581,"mtime":1622750746050,"results":"21","hashOfConfig":"14"},{"size":3509,"mtime":1622750752152,"results":"22","hashOfConfig":"14"},{"size":3006,"mtime":1622750752151,"results":"23","hashOfConfig":"14"},{"size":7473,"mtime":1622751320983,"results":"24","hashOfConfig":"14"},{"size":2495,"mtime":1622750746045,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"etyjnz",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/index.tsx",[],["54","55"],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/App.tsx",[],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/pages/clustermap.js",["56"],"import React, { useState, useRef } from \"react\";\n//import useSwr from \"swr\";\nimport GoogleMapReact from \"google-map-react\";\nimport useSupercluster from \"use-supercluster\";\nimport \"./App.css\";\n\nimport * as locations from \"../data/mock_data.json\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nconst Marker = ({ children }) => children;\n\nexport default function DemoApp() {\n    const mapRef = useRef();\n    const [bounds, setBounds] = useState(null);\n    const [zoom, setZoom] = useState(10);\n\n    const points = locations.users.map(user => ({\n        type: \"Feature\",\n        properties: { cluster: false, userId: user.id },\n        geometry: {\n            type: \"Point\",\n            coordinates: [\n                parseFloat(user.Longtude),\n                parseFloat(user.Latitude)\n            ]\n        }\n    }));\n\n    const { clusters, supercluster } = useSupercluster({\n        points,\n        bounds,\n        zoom,\n        options: { radius: 75, maxZoom: 20 }\n    });\n\n    return (\n        <div style={{ height: \"100vh\", width: \"100%\" }}>\n            <GoogleMapReact\n                googleMapURL={\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyA8nuKxeUQFlX2JEg_7NjQd1kUKs4r0LII\"}\n                defaultCenter={{ lat: 39.891480 , lng: 32.785450 }}\n                defaultZoom={10}\n                yesIWantToUseGoogleMapApiInternals\n                onGoogleApiLoaded={({ map }) => {\n                    mapRef.current = map;\n                }}\n                onChange={({ zoom, bounds }) => {\n                    setZoom(zoom);\n                    setBounds([\n                        bounds.nw.lng,\n                        bounds.se.lat,\n                        bounds.se.lng,\n                        bounds.nw.lat\n                    ]);\n                }}\n            >\n                {clusters.map(cluster => {\n                    const [longitude, latitude] = cluster.geometry.coordinates;\n                    const {\n                        cluster: isCluster,\n                        point_count: pointCount\n                    } = cluster.properties;\n\n                    if (isCluster) {\n                        return (\n                            <Marker\n                                key={locations.users.id}\n                                lat={latitude}\n                                lng={longitude}\n                            >\n                                <div\n                                    className=\"cluster-marker\"\n                                    style={{\n                                        width: `${10 + (pointCount / points.length) * 20}px`,\n                                        height: `${10 + (pointCount / points.length) * 20}px`\n                                    }}\n                                    onClick={() => {\n                                        const expansionZoom = Math.min(\n                                            supercluster.getClusterExpansionZoom(cluster.id),\n                                            20\n                                        );\n                                        mapRef.current.setZoom(expansionZoom);\n                                        mapRef.current.panTo({ lat: latitude, lng: longitude });\n                                    }}\n                                >\n                                    {pointCount}\n                                </div>\n                            </Marker>\n                        );\n                    }\n\n                    return (\n                        <Marker\n                            key={locations.users.id}\n                            lat={latitude}\n                            lng={longitude}\n                        >\n                            <button className=\"user-locations\">\n                                <img src=\"/mark.png\" alt=\"user-locations\" />\n                            </button>\n                        </Marker>\n                    );\n                })}\n            </GoogleMapReact>\n        </div>\n    );\n}",["57","58"],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/pages/LoginPage.tsx",[],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/pages/NotFoundPage.tsx",[],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/pages/FiliationPage.tsx",[],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/firebase/config.tsx",[],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/components/NavBar.tsx",[],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/components/FilteredUsersTable.tsx",["59","60"],"import React, {createContext, useContext, useEffect, useState} from 'react';\nimport {db} from \"../firebase/config\"\nimport {UserContext} from \"./FilterUsers\";\nimport FindContacts from \"./ContactsTable\";\nimport 'materialize-css';\nimport {User} from \"../classes/User\";\nimport {Button, Table} from \"react-bootstrap\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport const LocationContext  = createContext(undefined as any);\nexport default function FilteredUsersTable() {\n\n    let formInputs = useContext(UserContext);\n\n    const [users, setUsers] = useState(Array<User>());\n    useEffect(() => {\n        const userSnap = db.collection(\"Users\").withConverter(User.userConverter).get();\n\n        userSnap.then((querySnapshot) => {\n            let userArr = Array<User>();\n            querySnapshot.forEach((doc) => {\n                const user =  doc.data();\n                userArr.push(user);\n            });\n            setUsers(userArr);\n\n        }).catch((error) => {\n            console.log(\"Error getting document:\", error);\n        });\n    }, []);\n\n\n    const [indexes, setIndexes] = useState(Array<number>());\n    useEffect(() => {\n        let indexArr = Array<number>();\n        users.forEach(u => {\n            if (u.getName() === formInputs.name || u.getSurname() === formInputs.surname || u.getEmail() === formInputs.email) {\n                if(formInputs.surname ===\"\")\n                    indexArr.push(users.indexOf(u));\n                else\n                    if(u.getSurname() === formInputs.surname)\n                        indexArr.push(users.indexOf(u));\n            }\n        });\n\n        setIndexes(indexArr);\n    }, [formInputs]);\n\n    const [ourUser, setOurUser] = useState(new User(\"\",\"\",\"\",\"\",false));\n\n    let saveUser = (index: number) => {\n        setOurUser(users[index]);\n    }\n    const [day, setDay] = useState(2);\n    const getDay = (e : any) => {\n        let dayValue = e.target.value;\n        setDay(dayValue);\n\n    };\n    return(\n        <div>\n            <div>\n                <h3>User List</h3>\n                <table id=\"UserTable\">\n                    <thead>\n                        <tr >\n                            <th scope = \"col\">E-mail</th>\n                            <th scope = \"col\">Name</th>\n                            <th scope = \"col\">Surname</th>\n                            <th scope = \"col\">Past Number of Day</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {indexes.map((i, rowIndex) => {\n                        return <tr>\n                            <td> {\n                                users[i].getEmail()}</td>\n                            <td>{\n                                users[i].getName()}</td>\n                            <td>{\n                                users[i].getSurname()}\n                            </td>\n                            <td>\n                                <input className=\"form-control\"  onChange={getDay} name =\"day\" placeholder=\"day\" />\n                            </td>\n                            <td>\n                                <Button onClick={() => saveUser(i) }> Find Contacts </Button>\n                            </td>\n                        </tr>\n                    \n                    })}\n\n                    </tbody>\n                </table>\n            </div>\n            <LocationContext.Provider value={users} />\n            <FindContacts mUser={ourUser} allUsers ={users} mDay = {day}/>\n        </div>\n    )\n}","/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/components/FilterUsers.tsx",[],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/components/ContactsTable.tsx",["61","62"],"/Users/tarik/Desktop/Fuat-CommandPanel/auto-filiation/src/classes/User.tsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":9,"column":7,"nodeType":"69","messageId":"70","endLine":9,"endColumn":14},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"71","severity":1,"message":"72","line":7,"column":17,"nodeType":"69","messageId":"70","endLine":7,"endColumn":22},{"ruleId":"73","severity":1,"message":"74","line":47,"column":8,"nodeType":"75","endLine":47,"endColumn":20,"suggestions":"76"},{"ruleId":"71","severity":1,"message":"77","line":21,"column":12,"nodeType":"69","messageId":"70","endLine":21,"endColumn":15},{"ruleId":"73","severity":1,"message":"78","line":106,"column":8,"nodeType":"75","endLine":106,"endColumn":15,"suggestions":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'fetcher' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'Table' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array.","ArrayExpression",["82"],"'day' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allUsers' and 'mDay'. Either include them or remove the dependency array.",["83"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [formInputs, users]",{"range":"88","text":"89"},"Update the dependencies array to be: [allUsers, mDay, mUser]",{"range":"90","text":"91"},[1647,1659],"[formInputs, users]",[4676,4683],"[allUsers, mDay, mUser]"]