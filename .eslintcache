[{"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\index.tsx":"1","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\App.tsx":"2","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\pages\\clustermap.js":"3","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\pages\\LoginPage.tsx":"4","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\pages\\FiliationPage.tsx":"5","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\pages\\NotFoundPage.tsx":"6","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\components\\NavBar.tsx":"7","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\components\\FilterUsers.tsx":"8","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\components\\FilteredUsersTable.tsx":"9","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\firebase\\config.tsx":"10","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\components\\ContactsTable.tsx":"11","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\classes\\User.tsx":"12"},{"size":218,"mtime":1621971671788,"results":"13","hashOfConfig":"14"},{"size":790,"mtime":1621971671778,"results":"15","hashOfConfig":"14"},{"size":4928,"mtime":1623100841352,"results":"16","hashOfConfig":"14"},{"size":3297,"mtime":1621971671790,"results":"17","hashOfConfig":"14"},{"size":1428,"mtime":1623095562149,"results":"18","hashOfConfig":"14"},{"size":171,"mtime":1621971671790,"results":"19","hashOfConfig":"14"},{"size":1623,"mtime":1623095562149,"results":"20","hashOfConfig":"14"},{"size":3077,"mtime":1622565982021,"results":"21","hashOfConfig":"14"},{"size":3635,"mtime":1623095562149,"results":"22","hashOfConfig":"14"},{"size":797,"mtime":1621971671788,"results":"23","hashOfConfig":"14"},{"size":7978,"mtime":1623095562147,"results":"24","hashOfConfig":"14"},{"size":2586,"mtime":1621971671779,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"29n0w",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\index.tsx",[],["54","55"],"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\App.tsx",[],"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\pages\\clustermap.js",["56","57"],"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\pages\\LoginPage.tsx",[],"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\pages\\FiliationPage.tsx",["58","59"],"import FilteredUsersTable from \"../components/FilteredUsersTable\";\r\nimport React from \"react\";\r\nimport {db} from \"../firebase/config\"\r\nimport {FilterUsers} from \"../components/FilterUsers\";\r\nimport Nav from \"../components/NavBar\";\r\nimport * as datas from \"../data/mock_data.json\";\r\n\r\nfunction FiliationPage() {\r\n    /*function saveDatas(){\r\n        datas.users.map(user=>{\r\n            db.collection(\"users\").doc(user.email).set({\r\n                name: user.first_name,\r\n                surname: user.last_name,\r\n                email: user.email,\r\n                isRisky: false,\r\n                infected: false,\r\n                locations :[],\r\n            })\r\n        })\r\n    }*/\r\n    return (\r\n        <div>\r\n            <header>\r\n                <Nav/>\r\n            </header>\r\n            <div className=\"section\">\r\n                <div className=\"col-md-9 offset-md-1\">\r\n                    <FilterUsers>\r\n                        <div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-0\"/>\r\n                                <div className=\"col-md-13\">\r\n                                    <FilteredUsersTable/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </FilterUsers>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default FiliationPage;\r\n","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\pages\\NotFoundPage.tsx",[],"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\components\\NavBar.tsx",[],"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\components\\FilterUsers.tsx",[],"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\components\\FilteredUsersTable.tsx",["60","61"],"import React, {createContext, useContext, useEffect, useState} from 'react';\r\nimport {db} from \"../firebase/config\"\r\nimport {UserContext} from \"./FilterUsers\";\r\nimport FindContacts from \"./ContactsTable\";\r\nimport 'materialize-css';\r\nimport {User} from \"../classes/User\";\r\nimport {Button, Table} from \"react-bootstrap\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./style.css\";\r\n\r\nexport const LocationContext  = createContext(undefined as any);\r\nexport default function FilteredUsersTable() {\r\n\r\n    let formInputs = useContext(UserContext);\r\n\r\n    const [users, setUsers] = useState(Array<User>());\r\n    useEffect(() => {\r\n        const userSnap = db.collection(\"Users\").withConverter(User.userConverter).get();\r\n\r\n        userSnap.then((querySnapshot) => {\r\n            let userArr = Array<User>();\r\n            querySnapshot.forEach((doc) => {\r\n                const user =  doc.data();\r\n                userArr.push(user);\r\n            });\r\n            setUsers(userArr);\r\n\r\n        }).catch((error) => {\r\n            console.log(\"Error getting document:\", error);\r\n        });\r\n    }, []);\r\n    \r\n\r\n    const [indexes, setIndexes] = useState(Array<number>());\r\n    useEffect(() => {\r\n        let indexArr = Array<number>();\r\n        users.forEach(u => {\r\n            if (u.getName() === formInputs.name || u.getSurname() === formInputs.surname || u.getEmail() === formInputs.email) {\r\n                if(formInputs.surname ===\"\")\r\n                    indexArr.push(users.indexOf(u));\r\n                else\r\n                    if(u.getSurname() === formInputs.surname)\r\n                        indexArr.push(users.indexOf(u));\r\n            }\r\n        });\r\n\r\n        setIndexes(indexArr);\r\n    }, [formInputs]);\r\n\r\n    const [ourUser, setOurUser] = useState(new User(\"\",\"\",\"\",\"\",false));\r\n\r\n    let saveUser = (index: number) => {\r\n        setOurUser(users[index]);\r\n    }\r\n    const [day, setDay] = useState(2);\r\n    const getDay = (e : any) => {\r\n        let dayValue = e.target.value;\r\n        setDay(dayValue);\r\n\r\n    };\r\n    return(\r\n        <div>\r\n            <div>\r\n                <h3>User List</h3>\r\n                <table id=\"UserTable\">\r\n                    <thead>\r\n                        <tr >\r\n                            <th scope = \"col\">E-mail</th>\r\n                            <th scope = \"col\">Name</th>\r\n                            <th scope = \"col\">Surname</th>\r\n                            <th scope = \"col\">Past Number of Day</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {indexes.map((i, rowIndex) => {\r\n                        return <tr>\r\n                            <td> {\r\n                                users[i].getEmail()}</td>\r\n                            <td>{\r\n                                users[i].getName()}</td>\r\n                            <td>{\r\n                                users[i].getSurname()}\r\n                            </td>\r\n                            <td>\r\n                                <input className=\"form-control\"  onChange={getDay} name =\"day\" placeholder=\"day\" />\r\n                            </td>\r\n                            <td>\r\n                                <Button onClick={() => saveUser(i) }> Find Contacts </Button>\r\n                            </td>\r\n                        </tr>\r\n                    \r\n                    })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <LocationContext.Provider value={users} />\r\n            <FindContacts mUser={ourUser} allUsers ={users} mDay = {day}/>\r\n        </div>\r\n    )\r\n}","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\firebase\\config.tsx",[],"C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\components\\ContactsTable.tsx",["62","63"],"import React, {FC, ReactElement, useEffect, useState} from 'react';\r\nimport {UserLocation} from \"../classes/UserLocation\";\r\nimport {User} from \"../classes/User\";\r\nimport {Button, Table} from \"react-bootstrap\";\r\nimport {db} from \"../firebase/config\"\r\n\r\nconst degsToRads = (deg: number) => (deg * Math.PI) / 180.0;\r\nconst EARTH_RADIUS = 6371000; //in meters\r\n\r\n\r\n\r\ntype ChildProps = {\r\n    mUser: User,\r\n    allUsers: Array<User>,\r\n    mDay : number,\r\n}\r\n\r\n\r\nconst ContactsTable: FC<ChildProps> = ({mUser, allUsers ,mDay    }): ReactElement => {\r\n    const [contacts, setContacts] = useState(Array<User>());\r\n    const [day , setDay] = useState(2);\r\n    useEffect(()=>{\r\n        setDay(mDay)\r\n    },[mDay])\r\n    useEffect(() => {\r\n        let contactArr = Array<User>();\r\n\r\n        let mUserLocations = mUser.getLocations();\r\n        let mUserLocationsLength = mUserLocations.length;\r\n\r\n        \r\n\r\n        allUsers.forEach(comparedUser => {\r\n\r\n            if (mUser.getEmail() !== comparedUser.getEmail()) { // get rid of same user matching\r\n\r\n                let day = mDay ; // Get last 7 days Contacts\r\n                let seconds = day*86400; // convert day to seconds\r\n\r\n                let comparedUserLocations = comparedUser.getLocations();\r\n                let comparedUserLocationsLength = comparedUserLocations.length;\r\n\r\n                //According to the past days parameter, Take the location  in specific interval between [(today-pastDay)- today]\r\n                let today=new Date().getTime() / 1000;  // it returns today as sec\r\n                let startTimeInterval = today - seconds;\r\n\r\n                let k;\r\n                for(k=1;k< mUserLocationsLength;k++){\r\n            \r\n                    if(checkTimeInterval(mUserLocations[k],startTimeInterval)) break;                        \r\n                        \r\n                }\r\n\r\n                for (let i = k; i < mUserLocationsLength; i++) { //starts from k th index which is first index of User for desired time interval\r\n\r\n                    if (mUserLocationsLength > 3) {\r\n                        let mUserLocation = mUserLocations[i];\r\n\r\n                        let l;\r\n                        for(l=1;l<comparedUserLocationsLength;l++){\r\n                            if(checkTimeInterval(comparedUserLocations[l],startTimeInterval)) break;\r\n                        }\r\n\r\n                        for (let j = l; j < comparedUserLocationsLength; j++) { // starts from l th index which is first index of ComparedUser  for desired time interval\r\n                            if (comparedUserLocationsLength > 3) {\r\n\r\n                                //COMPARE TWO LOCATIONS\r\n                                let comparedUserLocation = comparedUserLocations[j];\r\n\r\n\r\n                                let distance = calculateDistance(comparedUserLocation, mUserLocation);\r\n                                let isTimeViolated = isAtTheSameTime(comparedUserLocation, mUserLocation);\r\n\r\n                                // If two location close each other with 5m at the same time\r\n                                if (distance < 5 && isTimeViolated) {\r\n                                    let locationBefore = comparedUserLocations[j - 1];\r\n                                    let locationAfter = comparedUserLocations[j + 1];\r\n\r\n                                    // get comparedUser before and after location distances\r\n                                    let distanceBefore = calculateDistance(locationBefore, mUserLocation);\r\n                                    let distanceAfter = calculateDistance(locationAfter, mUserLocation);\r\n\r\n                                    // get mUser before and after location distances\r\n                                    //let userDistanceBefore = calculateDistance(locationData[i], locationData[i - 1]);\r\n                                    //let userDistanceAfter = calculateDistance(locationData[i], locationData[i + 1]);\r\n\r\n                                    if ((distanceBefore < 5 && distanceAfter < 5) /*&& (userDistanceAfter < 5 && userDistanceBefore < 5)*/) {\r\n                                        let altitudeBetween = calculateAltitude(comparedUserLocation, mUserLocation);\r\n                                        if (altitudeBetween < 3) {\r\n                                            //console.log(myUserData[j])\r\n                                            contactArr.push(comparedUser)\r\n                                            //i = locationData.length;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        })\r\n\r\n        setContacts(contactArr);\r\n    }, [mUser])\r\n\r\n    let sendNotification = (contacts : Array<User>) => {\r\n        var namesAndSurnames =[];\r\n        var emails =[];\r\n        for(var i =0 ; i<contacts.length ; i++){\r\n            namesAndSurnames.push(contacts[i].getName()+\" \" + contacts[i].getSurname());\r\n            emails.push(contacts[i].getEmail())\r\n        }\r\n        emails.forEach(email =>{\r\n            db.collection(\"Users\").doc(email).update({\r\n                \"isRisky\" : true\r\n            }).then(function() {\r\n                console.log(\"Document successfully updated!\");\r\n            });\r\n        })\r\n\r\n        alert(\"NOTIFY USER \" + namesAndSurnames );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>Contacts</h4>\r\n            <Table id =\"UserTable\" size=\"sm\">\r\n                <thead>\r\n                <th>Email</th>\r\n                <th>Name</th>\r\n                <th>Surname</th>\r\n                </thead>\r\n\r\n                <tbody>\r\n                {contacts.map((contactUser) => {\r\n                    return <tr>\r\n                        <td> {\r\n                            contactUser.getEmail()}</td>\r\n                        <td>{\r\n                            contactUser.getName()}</td>\r\n                        <td>{\r\n                            contactUser.getSurname()}</td>\r\n\r\n                    </tr>\r\n\r\n                })}<tr>\r\n                    <td>\r\n                    <Button onClick={() => sendNotification(contacts)}>Send Notification </Button>\r\n                    </td>\r\n                    <td>\r\n                    <input className=\"form-control\"  name =\"age\" placeholder=\"Age Filter\" />\r\n                    </td>\r\n                </tr> \r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactsTable;\r\n\r\nfunction checkTimeInterval(location: UserLocation,startingTime: number):any{\r\n\r\n\r\n    if(location.time>startingTime){\r\n        return true;\r\n    }\r\n    else{\r\n         return false;\r\n        }\r\n\r\n}\r\n\r\nfunction calculateDistance(location1: UserLocation, location2: UserLocation): number {\r\n\r\n    //convert latitutes and longitudes to radians\r\n    let lat1 = degsToRads(location1.latitude);\r\n    let lng1 = degsToRads(location1.latitude);\r\n    let lat2 = degsToRads(location2.latitude);\r\n    let lng2 = degsToRads(location2.latitude);\r\n    \r\n\r\n\r\n    //haversine formula\r\n    let dlat = lat2 - lat1;\r\n    let dlon = lng2 - lng1;\r\n\r\n    let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);\r\n\r\n    let c = 2 * Math.asin(Math.sqrt(a));\r\n    return c * EARTH_RADIUS;\r\n}\r\n\r\nfunction calculateAltitude(location1: UserLocation, location2: UserLocation): number {\r\n\r\n    let altitude1 = location1.altitude;\r\n    let altitude2 = location2.altitude;\r\n\r\n    return Math.abs(altitude1 - altitude2);\r\n}\r\n\r\n// Violated time was set as 120 sec!!\r\nfunction isAtTheSameTime(location1: UserLocation, location2: UserLocation): boolean {\r\n    if (Math.abs(location1.time - location2.time) < 1200) {\r\n        //console.log(\"Time = \" + Math.abs(location1.time - location2.time));\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}","C:\\Users\\elaku\\WebstormProjects\\auto-filiation\\src\\classes\\User.tsx",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":6,"column":9,"nodeType":"70","messageId":"71","endLine":6,"endColumn":13},{"ruleId":"68","severity":1,"message":"72","line":11,"column":7,"nodeType":"70","messageId":"71","endLine":11,"endColumn":14},{"ruleId":"73","severity":1,"message":"74","line":3,"column":9,"nodeType":"70","messageId":"71","endLine":3,"endColumn":11},{"ruleId":"73","severity":1,"message":"75","line":6,"column":13,"nodeType":"70","messageId":"71","endLine":6,"endColumn":18},{"ruleId":"73","severity":1,"message":"76","line":7,"column":17,"nodeType":"70","messageId":"71","endLine":7,"endColumn":22},{"ruleId":"77","severity":1,"message":"78","line":48,"column":8,"nodeType":"79","endLine":48,"endColumn":20,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":21,"column":12,"nodeType":"70","messageId":"71","endLine":21,"endColumn":15},{"ruleId":"77","severity":1,"message":"82","line":107,"column":8,"nodeType":"79","endLine":107,"endColumn":15,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'User' is defined but never used.","Identifier","unusedVar","'fetcher' is assigned a value but never used.","@typescript-eslint/no-unused-vars","'db' is defined but never used.","'datas' is defined but never used.","'Table' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array.","ArrayExpression",["86"],"'day' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allUsers' and 'mDay'. Either include them or remove the dependency array.",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [formInputs, users]",{"range":"92","text":"93"},"Update the dependencies array to be: [allUsers, mDay, mUser]",{"range":"94","text":"95"},[1720,1732],"[formInputs, users]",[4832,4839],"[allUsers, mDay, mUser]"]