[{"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\index.tsx":"1","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\App.tsx":"2","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\pages\\clustermap.js":"3","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\pages\\NotFoundPage.tsx":"4","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\pages\\LoginPage.tsx":"5","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\pages\\FiliationPage.tsx":"6","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\components\\NavBar.tsx":"7","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\components\\FilterUsers.tsx":"8","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\firebase\\config.tsx":"9","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\components\\FilteredUsersTable.tsx":"10","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\components\\ContactsTable.tsx":"11","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\classes\\User.tsx":"12"},{"size":218,"mtime":1621803078467,"results":"13","hashOfConfig":"14"},{"size":790,"mtime":1621965520397,"results":"15","hashOfConfig":"14"},{"size":2256,"mtime":1621965795141,"results":"16","hashOfConfig":"14"},{"size":171,"mtime":1621803078470,"results":"17","hashOfConfig":"14"},{"size":3297,"mtime":1621804605286,"results":"18","hashOfConfig":"14"},{"size":942,"mtime":1621803078468,"results":"19","hashOfConfig":"14"},{"size":1625,"mtime":1621965520374,"results":"20","hashOfConfig":"14"},{"size":3081,"mtime":1621803078461,"results":"21","hashOfConfig":"14"},{"size":797,"mtime":1621803078466,"results":"22","hashOfConfig":"14"},{"size":3382,"mtime":1621968782187,"results":"23","hashOfConfig":"14"},{"size":7092,"mtime":1621968766206,"results":"24","hashOfConfig":"14"},{"size":2586,"mtime":1621803078458,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"29vdgg",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\index.tsx",[],["55","56"],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\App.tsx",[],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\pages\\clustermap.js",["57"],"import React, { useState } from \"react\";\r\nimport * as locations from \"../data/mock_data.json\";\r\n//import logo from './logo.svg';\r\n//import './App.css';\r\n\r\nconst fetch = require(\"isomorphic-fetch\");\r\nconst { compose, withProps, withHandlers } = require(\"recompose\");\r\nconst {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} = require(\"react-google-maps\");\r\nconst { MarkerClusterer } = require(\"react-google-maps/lib/components/addons/MarkerClusterer\");\r\n\r\nconst MapWithAMarkerClusterer = compose(\r\n  withProps({\r\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyA8nuKxeUQFlX2JEg_7NjQd1kUKs4r0LII\",\r\n    loadingElement: <div style={{ height: `100%` }} />,\r\n    containerElement: <div style={{ height: `1000px` }} />,\r\n    mapElement: <div style={{ height: `100%` }} />,\r\n  }),\r\n  withHandlers({\r\n    onMarkerClustererClick: () => (markerClusterer) => {\r\n      const clickedMarkers = markerClusterer.getMarkers()\r\n      console.log(`Current clicked markers length: ${clickedMarkers.length}`)\r\n      console.log(clickedMarkers)\r\n    },\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(props =>\r\n  <GoogleMap\r\n    defaultZoom={3}\r\n    defaultCenter={{ lat: 39.891480 , lng: 32.785450 }} \r\n  >\r\n    <MarkerClusterer\r\n      onClick={props.onMarkerClustererClick}\r\n      averageCenter\r\n      enableRetinaIcons\r\n      gridSize={60}\r\n    >\r\n      {locations.users.map(marker => (\r\n        <Marker\r\n          key={marker.photo_id}\r\n          position={{ lat: marker.Latitude, lng: marker.Longtitude }}\r\n        />\r\n      ))}\r\n    </MarkerClusterer>\r\n  </GoogleMap>\r\n);\r\n\r\nclass DemoApp extends React.PureComponent {\r\n  componentWillMount() {\r\n    this.setState({ markers: [] })\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = [\r\n      // Length issue\r\n      `https://gist.githubusercontent.com`,\r\n      `/farrrr/dfda7dd7fccfec5474d3`,\r\n      `/raw/758852bbc1979f6c4522ab4e92d1c92cba8fb0dc/data.json`\r\n    ].join(\"\")\r\n\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({ markers: data.photos });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MapWithAMarkerClusterer markers={this.state.markers} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default DemoApp;\r\n\r\n",["58","59"],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\pages\\NotFoundPage.tsx",[],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\pages\\LoginPage.tsx",[],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\pages\\FiliationPage.tsx",[],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\components\\NavBar.tsx",[],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\components\\FilterUsers.tsx",[],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\firebase\\config.tsx",[],"C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\components\\FilteredUsersTable.tsx",["60","61","62","63"],"import React, {useContext, useEffect, useState } from 'react';\r\nimport {db} from \"../firebase/config\"\r\nimport {UserContext} from \"./FilterUsers\";\r\nimport FindContacts from \"./ContactsTable\";\r\nimport 'materialize-css';\r\nimport {User} from \"../classes/User\";\r\nimport {Button, Table} from \"react-bootstrap\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { UserLocation } from '../classes/UserLocation';\r\nimport ContactsTable from \"./ContactsTable\";\r\n\r\nexport default function FilteredUsersTable() {\r\n\r\n    let formInputs = useContext(UserContext);\r\n\r\n    const [users, setUsers] = useState(Array<User>());\r\n    useEffect(() => {\r\n        const userSnap = db.collection(\"Users\").withConverter(User.userConverter).get();\r\n\r\n        userSnap.then((querySnapshot) => {\r\n            let userArr = Array<User>();\r\n            querySnapshot.forEach((doc) => {\r\n                const user =  doc.data();\r\n                userArr.push(user);\r\n            });\r\n            setUsers(userArr);\r\n\r\n        }).catch((error) => {\r\n            console.log(\"Error getting document:\", error);\r\n        });\r\n    }, []);\r\n\r\n\r\n    const [indexes, setIndexes] = useState(Array<number>());\r\n    useEffect(() => {\r\n        let indexArr = Array<number>();\r\n        users.forEach(u => {\r\n            if (u.getName() === formInputs.name || u.getSurname() === formInputs.surname || u.getEmail() === formInputs.email) {\r\n                indexArr.push(users.indexOf(u));\r\n            }\r\n        });\r\n\r\n        setIndexes(indexArr);\r\n    }, [formInputs]);\r\n\r\n    const [ourUser, setOurUser] = useState(new User(\"\",\"\",\"\",\"\",false));\r\n\r\n    let saveUser = (index: number) => {\r\n        setOurUser(users[index]);\r\n    }\r\n    const [day, setDay] = useState(2);\r\n    const getDay = (e : any) => {\r\n        let dayValue = e.target.value;\r\n        setDay(dayValue);\r\n\r\n    };\r\n    return(\r\n        <div>\r\n            <div>\r\n                <h3>User List</h3>\r\n                <table id=\"UserTable\">\r\n                    <thead>\r\n                        <tr >\r\n                            <th scope = \"col\">E-mail</th>\r\n                            <th scope = \"col\">Name</th>\r\n                            <th scope = \"col\">Surname</th>\r\n                            <th scope = \"col\">Past Number of Day</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {indexes.map((i, rowIndex) => {\r\n                        return <tr>\r\n                            <td> {\r\n                                users[i].getEmail()}</td>\r\n                            <td>{\r\n                                users[i].getName()}</td>\r\n                            <td>{\r\n                                users[i].getSurname()}\r\n                            </td>\r\n                            <td>\r\n                                <input className=\"form-control\"  onChange={getDay} name =\"day\" placeholder=\"day\" />\r\n                            </td>\r\n                            <td>\r\n                                <Button onClick={() => saveUser(i) }> Find Contacts </Button>\r\n                            </td>\r\n                        </tr>\r\n                    \r\n                    })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <FindContacts mUser={ourUser} allUsers ={users} mDay = {day}/>\r\n        </div>\r\n    )\r\n}","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\components\\ContactsTable.tsx",["64"],"import React, {FC, ReactElement, useEffect, useState} from 'react';\r\nimport {UserLocation} from \"../classes/UserLocation\";\r\nimport {User} from \"../classes/User\";\r\nimport {Button, Table} from \"react-bootstrap\";\r\n\r\n\r\nconst degsToRads = (deg: number) => (deg * Math.PI) / 180.0;\r\nconst EARTH_RADIUS = 6371000; //in meters\r\n\r\n\r\n\r\ntype ChildProps = {\r\n    mUser: User,\r\n    allUsers: Array<User>,\r\n    mDay : any,\r\n}\r\n\r\n\r\nconst ContactsTable: FC<ChildProps> = ({mUser, allUsers ,mDay : any   }): ReactElement => {\r\n    const [contacts, setContacts] = useState(Array<User>());\r\n\r\n    useEffect(() => {\r\n        let contactArr = Array<User>();\r\n\r\n        let mUserLocations = mUser.getLocations();\r\n        let mUserLocationsLength = mUserLocations.length;\r\n\r\n        \r\n\r\n        allUsers.forEach(comparedUser => {\r\n\r\n            if (mUser.getEmail() !== comparedUser.getEmail()) { // get rid of same user matching\r\n\r\n                let day = 7; // Get last 7 days Contacts\r\n                let seconds = day*86400; // convert day to seconds\r\n\r\n                let comparedUserLocations = comparedUser.getLocations();\r\n                let comparedUserLocationsLength = comparedUserLocations.length;\r\n\r\n                //According to the past days parameter, Take the location  in specific interval between [(today-pastDay)- today]\r\n                let today=new Date().getTime() / 1000;  // it returns today as sec\r\n                let startTimeInterval = today - seconds;\r\n\r\n                let k;\r\n                for(k=1;k< mUserLocationsLength;k++){\r\n            \r\n                    if(checkTimeInterval(mUserLocations[k],startTimeInterval)) break;\r\n                }\r\n\r\n                for (let i = k; i < mUserLocationsLength; i++) { //starts from k th index which is first index of User for desired time interval\r\n\r\n                    if (mUserLocationsLength > 3) {\r\n                        let mUserLocation = mUserLocations[i];\r\n\r\n                        let l;\r\n                        for(l=1;l<comparedUserLocationsLength;l++){\r\n                            if(checkTimeInterval(comparedUserLocations[l],startTimeInterval)) break;\r\n                        }\r\n\r\n                        for (let j = l; j < comparedUserLocationsLength; j++) { // starts from l th index which is first index of ComparedUser  for desired time interval\r\n                            if (comparedUserLocationsLength > 3) {\r\n\r\n                                //COMPARE TWO LOCATIONS\r\n                                let comparedUserLocation = comparedUserLocations[j];\r\n\r\n\r\n                                let distance = calculateDistance(comparedUserLocation, mUserLocation);\r\n                                let isTimeViolated = isAtTheSameTime(comparedUserLocation, mUserLocation);\r\n\r\n                                // If two location close each other with 5m at the same time\r\n                                if (distance < 5 && isTimeViolated) {\r\n                                    let locationBefore = comparedUserLocations[j - 1];\r\n                                    let locationAfter = comparedUserLocations[j + 1];\r\n\r\n                                    // get comparedUser before and after location distances\r\n                                    let distanceBefore = calculateDistance(locationBefore, mUserLocation);\r\n                                    let distanceAfter = calculateDistance(locationAfter, mUserLocation);\r\n\r\n                                    // get mUser before and after location distances\r\n                                    //let userDistanceBefore = calculateDistance(locationData[i], locationData[i - 1]);\r\n                                    //let userDistanceAfter = calculateDistance(locationData[i], locationData[i + 1]);\r\n\r\n                                    if ((distanceBefore < 5 && distanceAfter < 5) /*&& (userDistanceAfter < 5 && userDistanceBefore < 5)*/) {\r\n                                        let altitudeBetween = calculateAltitude(comparedUserLocation, mUserLocation);\r\n                                        if (altitudeBetween < 3) {\r\n                                            //console.log(myUserData[j])\r\n                                            contactArr.push(comparedUser)\r\n                                            //i = locationData.length;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        })\r\n\r\n        setContacts(contactArr);\r\n    }, [mUser])\r\n\r\n    let sendNotification = (mail: string) => {\r\n        alert(\"NOTIFY USER \" + mail);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>Contacts</h4>\r\n            <Table size=\"sm\">\r\n                <thead>\r\n                <th>Email</th>\r\n                <th>Name</th>\r\n                <th>Surname</th>\r\n                </thead>\r\n\r\n                <tbody>\r\n                {contacts.map((contactUser) => {\r\n                    return <tr>\r\n                        <td> {\r\n                            contactUser.getEmail()}</td>\r\n                        <td>{\r\n                            contactUser.getName()}</td>\r\n                        <td>{\r\n                            contactUser.getSurname()}</td>\r\n                        <td>\r\n                            <Button onClick={() => sendNotification(contactUser.getEmail())}> Send Notification </Button>\r\n                        </td>\r\n                    </tr>\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactsTable;\r\n\r\nfunction checkTimeInterval(location: UserLocation,startingTime: number):any{\r\n\r\n\r\n    if(location.time>startingTime){\r\n        return true;\r\n    }\r\n    else{\r\n         return false;\r\n        }\r\n\r\n}\r\n\r\nfunction calculateDistance(location1: UserLocation, location2: UserLocation): number {\r\n\r\n    //convert latitutes and longitudes to radians\r\n    let lat1 = degsToRads(location1.latitude);\r\n    let lng1 = degsToRads(location1.latitude);\r\n    let lat2 = degsToRads(location2.latitude);\r\n    let lng2 = degsToRads(location2.latitude);\r\n    \r\n\r\n\r\n    //haversine formula\r\n    let dlat = lat2 - lat1;\r\n    let dlon = lng2 - lng1;\r\n\r\n    let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);\r\n\r\n    let c = 2 * Math.asin(Math.sqrt(a));\r\n    return c * EARTH_RADIUS;\r\n}\r\n\r\nfunction calculateAltitude(location1: UserLocation, location2: UserLocation): number {\r\n\r\n    let altitude1 = location1.altitude;\r\n    let altitude2 = location2.altitude;\r\n\r\n    return Math.abs(altitude1 - altitude2);\r\n}\r\n\r\n// Violated time was set as 120 sec!!\r\nfunction isAtTheSameTime(location1: UserLocation, location2: UserLocation): boolean {\r\n    if (Math.abs(location1.time - location2.time) < 1200) {\r\n        //console.log(\"Time = \" + Math.abs(location1.time - location2.time));\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}","C:\\Users\\fuate\\WebstormProjects\\Command-Panel\\auto-filiation\\src\\classes\\User.tsx",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"73","severity":1,"message":"74","line":7,"column":17,"nodeType":"71","messageId":"72","endLine":7,"endColumn":22},{"ruleId":"73","severity":1,"message":"75","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":22},{"ruleId":"73","severity":1,"message":"76","line":10,"column":8,"nodeType":"71","messageId":"72","endLine":10,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":44,"column":8,"nodeType":"79","endLine":44,"endColumn":20,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"81","line":103,"column":8,"nodeType":"79","endLine":103,"endColumn":15,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'Table' is defined but never used.","'UserLocation' is defined but never used.","'ContactsTable' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array.","ArrayExpression",["85"],"React Hook useEffect has a missing dependency: 'allUsers'. Either include it or remove the dependency array.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [formInputs, users]",{"range":"91","text":"92"},"Update the dependencies array to be: [allUsers, mUser]",{"range":"93","text":"94"},[1523,1535],"[formInputs, users]",[4646,4653],"[allUsers, mUser]"]